# -*- coding: utf-8 -*-
"""Malaria Infection Diagnosis through Cellular Image Classification using CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BpuIhp6IcwyCk5-KWYRae7MrAiTgJL04
"""

!wget "ftp://lhcftp.nlm.nih.gov/Open-Access-Datasets/Malaria/cell_images.zip"

!unzip cell_images.zip

import tensorflow as tf
from tensorflow import keras 
from tensorflow.keras import Sequential 
from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPool2D, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

print(tf.__version__)

import numpy as np 
import matplotlib.pyplot as plt

np.random.seed(0)

width = 64
height = 64

data = ImageDataGenerator(rescale = 1/255.0, 
                          validation_split = 0.2)

train = data.flow_from_directory(directory = '/content/cell_images', 
                                 target_size = (width, height), 
                                 class_mode = 'binary', 
                                 batch_size = 16, 
                                 subset = 'training')

valid = data.flow_from_directory(directory = '/content/cell_images', 
                                 target_size = (width, height), 
                                 class_mode = 'binary', 
                                 batch_size = 16, 
                                 subset = 'validation')

train.labels

valid.labels

model = Sequential() 

model.add(Conv2D(filters = 16, kernel_size = (3, 3), activation="relu", input_shape = (width, height, 3)))
model.add(MaxPool2D(pool_size = (2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation="relu", input_shape = (width, height, 3)))
model.add(MaxPool2D(pool_size = (2, 2)))
model.add(Dropout(0.2))

model.add(Conv2D(filters = 64, kernel_size = (3, 3), activation="relu", input_shape = (width, height, 3)))
model.add(MaxPool2D(pool_size = (2, 2)))
model.add(Dropout(0.2))

model.add(Flatten())

model.add(Dense(units = 64, activation = 'relu'))
model.add(Dropout(0.5))

model.add(Dense(units = 1, activation = 'sigmoid'))

model.summary()

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

model_history = model.fit_generator(generator = train, steps_per_epoch = len(train), epochs = 5, 
                    validation_data = valid, validation_steps = len(valid))

def plotLearningCurve(history,epochs):
  epochRange = range(1,epochs+1)
  plt.plot(epochRange,history.history['accuracy'])
  plt.plot(epochRange,history.history['val_accuracy'])
  plt.title('Model Accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.show()

  plt.plot(epochRange,history.history['loss'])
  plt.plot(epochRange,history.history['val_loss'])
  plt.title('Model Loss')
  plt.xlabel('Epoch')
  plt.ylabel('Loss')
  plt.legend(['Train','Validation'],loc='upper left')
  plt.show()

plotLearningCurve(model_history, 5)

